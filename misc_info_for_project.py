([( 12.+(12*3))/48,  (11.83783784+(12*3))/48, (11.67567568+(12*3))/48 , (11.51351351+(12*3))/48 , (11.35135135+(12*3))/48,
  (11.18918919+(12*3))/48,  (11.02702703+(12*3))/48,  (10.86486486+(12*3))/48, ( 10.7027027+(12*3))/48,   (10.54054054+(12*3))/48,
  (10.37837838+(12*3))/48,  (10.21621622+(12*3))/48,  (10.05405405+(12*3))/48,  ( 9.89189189+(12*3))/48,  ( 9.72972973+(12*3))/48,
  ( 9.56756757+(12*3))/48,  ( 9.40540541+(12*3))/48,  ( 9.24324324+(12*3))/48,  ( 9.08108108+(12*3))/48,  ( 8.91891892+(12*3))/48,
  ( 8.75675676+(12*3))/48,  ( 8.59459459+(12*3))/48,  ( 8.43243243+(12*3))/48,  ( 8.27027027+(12*3))/48,  ( 8.10810811+(12*3))/48,
  ( 7.94594595+(12*3))/48,  ( 7.78378378+(12*3))/48,  ( 7.62162162+(12*3))/48,  ( 7.45945946+(12*3))/48, (  7.2972973+(12*3))/48,
  ( 7.13513514+(12*3))/48,  ( 6.97297297+(12*3))/48,  ( 6.81081081+(12*3))/48,  ( 6.64864865+(12*3))/48,  ( 6.48648649+(12*3))/48,
  ( 6.32432432+(12*3))/48,  ( 6.16216216+(12*3))/48,   (6. +(12*3))/48        , ( 5.83783784+(12*3))/48,  ( 5.67567568+(12*3))/48,
  ( 5.51351351+(12*3))/48,  ( 5.35135135+(12*3))/48,  ( 5.18918919+(12*3))/48,  ( 5.02702703+(12*3))/48,  ( 4.86486486+(12*3))/48,
 (  4.7027027+(12*3))/48 ,  ( 4.54054054+(12*3))/48,  ( 4.37837838+(12*3))/48,  ( 4.21621622+(12*3))/48,  ( 4.05405405+(12*3))/48,
  ( 3.89189189+(12*3))/48,  ( 3.72972973+(12*3))/48,  ( 3.56756757+(12*3))/48,  ( 3.40540541+(12*3))/48,  ( 3.24324324+(12*3))/48,
  ( 3.08108108+(12*3))/48,  ( 2.91891892+(12*3))/48,  ( 2.75675676+(12*3))/48,  ( 2.59459459+(12*3))/48,  ( 2.43243243+(12*3))/48,
  ( 2.27027027+(12*3))/48,  ( 2.10810811+(12*3))/48,  ( 1.94594595+(12*3))/48,  ( 1.78378378+(12*3))/48,  ( 1.62162162+(12*3))/48,
  ( 1.45945946+(12*3))/48, (  1.2972973+(12*3))/48 ,  ( 1.13513514+(12*3))/48,  ( 0.97297297+(12*3))/48,  ( 0.81081081+(12*3))/48,
  ( 0.64864865+(12*3))/48,  ( 0.48648649+(12*3))/48,  ( 0.32432432+(12*3))/48,  ( 0.16216216+(12*3))/48,   0.        ])


[ ( 0. +(12*3))/48,       (   0.16216216 +(12*3))/48,  ( 0.32432432  +(12*3))/48, (0.48648649 +(12*3))/48,   (0.64864865 +(12*3))/48,
   (0.81081081 +(12*3))/48,  (0.97297297+(12*3))/48,   (1.13513514 +(12*3))/48,  (1.2972973 +(12*3))/48,   (1.45945946+(12*3))/48,
   (1.62162162+(12*3))/48,   (1.78378378 +(12*3))/48,  (1.94594595+(12*3))/48,   (2.10810811 +(12*3))/48, (2.27027027+(12*3))/48,
   (2.43243243 +(12*3))/48,  (2.59459459+(12*3))/48,   (2.75675676+(12*3))/48,   (2.91891892 +(12*3))/48,  (3.08108108+(12*3))/48,
   (3.24324324+(12*3))/48,   (3.40540541+(12*3))/48,   (3.56756757 +(12*3))/48,  (3.72972973+(12*3))/48,   (3.89189189+(12*3))/48,
   (4.05405405 +(12*3))/48,  (4.21621622 +(12*3))/48,  (4.37837838 +(12*3))/48,  (4.54054054 +(12*3))/48,  (4.7027027+(12*3))/48,
   (4.86486486+(12*3))/48,   (5.02702703 +(12*3))/48,  (5.18918919 +(12*3))/48,  (5.35135135+(12*3))/48,   (5.51351351+(12*3))/48,
   (5.67567568+(12*3))/48,  (5.83783784+(12*3))/48,   (6.  +(12*3))/48,        ( 6.16216216+(12*3))/48,  ( 6.32432432+(12*3))/48,
   (6.48648649 +(12*3))/48,  (6.64864865 +(12*3))/48,  (6.81081081+(12*3))/48,   (6.97297297 +(12*3))/48,  (7.13513514+(12*3))/48,
  (7.2972973 +(12*3))/48,   (7.45945946+(12*3))/48,   (7.62162162 +(12*3))/48,  (7.78378378 +(12*3))/48,  (7.94594595+(12*3))/48,
   (8.10810811 +(12*3))/48,  (8.27027027 +(12*3))/48,  (8.43243243+(12*3))/48,  (8.59459459 +(12*3))/48,  (8.75675676+(12*3))/48,
   (8.91891892 +(12*3))/48,  (9.08108108 +(12*3))/48,  (9.24324324 +(12*3))/48,  (9.40540541 +(12*3))/48,  (9.56756757+(12*3))/48,
   (9.72972973 +(12*3))/48,  (9.89189189 +(12*3))/48, (10.05405405+(12*3))/48,  (10.21621622+(12*3))/48,  (10.37837838+(12*3))/48,
  (10.54054054 +(12*3))/48, (10.7027027 +(12*3))/48,  (10.86486486 +(12*3))/48, (11.02702703+(12*3))/48,  (11.18918919+(12*3))/48,
  (11.35135135+(12*3))/48,  (11.51351351+(12*3))/48,  (11.67567568+(12*3))/48,  (11.83783784+(12*3))/48,  (12.+(12*3))/48        ]



  [ 0.      ,    0.01351351,  0.02702703,  0.04054054,  0.05405405,  0.06756757,
  0.08108108,  0.09459459,  0.10810811,  0.12162162,  0.13513514,  0.14864865,
  0.16216216,  0.17567568,  0.18918919,  0.2027027 ,  0.21621622,  0.22972973,
  0.24324324,  0.25675676,  0.27027027,  0.28378378,  0.2972973 ,  0.31081081,
  0.32432432,  0.33783784,  0.35135135,  0.36486486,  0.37837838,  0.39189189,
  0.40540541,  0.41891892,  0.43243243,  0.44594595,  0.45945946 , 0.47297297,
  0.48648649,  0.5       ,  0.51351351,  0.52702703,  0.54054054 , 0.55405405,
  0.56756757,  0.58108108,  0.59459459,  0.60810811,  0.62162162,  0.63513514,
  0.64864865, 0.66216216 , 0.67567568 , 0.68918919 , 0.7027027 ,  0.71621622,
  0.72972973,  0.74324324,  0.75675676,  0.77027027,  0.78378378,  0.7972973,
  0.81081081,  0.82432432,  0.83783784,  0.85135135,  0.86486486,  0.87837838,
  0.89189189,  0.90540541,  0.91891892,  0.93243243,  0.94594595,  0.95945946,
  0.97297297,  0.98648649,  1.    ]




  [  0.   ,        0.64864865 ,  1.2972973 ,   1.94594595,   2.59459459,
   3.24324324,   3.89189189  , 4.54054054,   5.18918919,   5.83783784,
   6.48648649 ,  7.13513514 ,  7.78378378,   8.43243243,   9.08108108,
   9.72972973 , 10.37837838 , 11.02702703,  11.67567568,  12.32432432,
  12.97297297 , 13.62162162 , 14.27027027 , 14.91891892,  15.56756757,
  16.21621622 , 16.86486486 , 17.51351351,  18.16216216,  18.81081081,
  19.45945946 , 20.10810811 , 20.75675676,  21.40540541,  22.05405405,
  22.7027027  , 23.35135135 , 24.         , 24.64864865,  25.2972973,
  25.94594595 , 26.59459459 , 27.24324324,  27.89189189,  28.54054054,
  29.18918919 , 29.83783784 , 30.48648649,  31.13513514,  31.78378378,
  32.43243243 , 33.08108108 , 33.72972973,  34.37837838,  35.02702703,
  35.67567568 , 36.32432432 , 36.97297297,  37.62162162,  38.27027027,
  38.91891892 , 39.56756757 , 40.21621622,  40.86486486,  41.51351351,
  42.16216216  ,42.81081081 , 43.45945946,  44.10810811,  44.75675676,
  45.40540541 , 46.05405405  ,46.7027027,   47.35135135,  48. ]




  f = .25
yest = lowess(point_diff2,win_percent_array , f=2, iter=3)
plt.figure(7)
plt.clf()
plt.plot(point_diff2, win_percent_array, label='y noisy')
plt.plot(point_diff2, win_percent_array, label='y pred')
plt.legend()
plt.show()



#https://gist.github.com/agramfort/850437
def lowess(x, y, f=2. / 3., iter=3):
    """lowess(x, y, f=2./3., iter=3) -> yest
    Lowess smoother: Robust locally weighted regression.
    The lowess function fits a nonparametric regression curve to a scatterplot.
    The arrays x and y contain an equal number of elements; each pair
    (x[i], y[i]) defines a data point in the scatterplot. The function returns
    the estimated (smooth) values of y.
    The smoothing span is given by f. A larger value for f will result in a
    smoother curve. The number of robustifying iterations is given by iter. The
    function will run faster with a smaller number of iterations.
    """
    n = len(x)
    print(n)
    r = int(np.ceil(f * n))
    print(r)
   #h = [np.sort(abs(x - x[i]))[r] for i in range(74)]
    w = np.clip(abs((x[:, None] - x[None, :]) / x), 0.0, 1.0)
    w = (1 - w ** 3) ** 3
    yest = np.zeros(n)
    delta = np.ones(n)
    for iteration in range(iter):
        for i in range(n):
            weights = delta * w[:, i]
            b = np.array([np.sum(weights * y ), np.sum(weights * y * x )])
            A = np.array([[np.sum(weights), np.sum(weights * x)],
                          [np.sum(weights * x), np.sum(weights * x * x )]])
            beta = linalg.solve(A, b)
            yest[i] = beta[0] + beta[1] * x[i]

        residuals = y - yest
        s = np.median(np.abs(residuals))
        delta = np.clip(residuals / (6.0 * s), -1, 1)
        delta = (1 - delta ** 2) ** 2

    return yest







     ([( 12.+(12*3))/48,  (11.83783784+(12*3))/48, (11.67567568+(12*3))/48 , (11.51351351+(12*3))/48 , (11.35135135+(12*3))/48,
  (11.18918919+(12*3))/48,  (11.02702703+(12*3))/48,  (10.86486486+(12*3))/48, ( 10.7027027+(12*3))/48,   (10.54054054+(12*3))/48,
  (10.37837838+(12*3))/48,  (10.21621622+(12*3))/48,  (10.05405405+(12*3))/48,  ( 9.89189189+(12*3))/48,  ( 9.72972973+(12*3))/48,
  ( 9.56756757+(12*3))/48,  ( 9.40540541+(12*3))/48,  ( 9.24324324+(12*3))/48,  ( 9.08108108+(12*3))/48,  ( 8.91891892+(12*3))/48,
  ( 8.75675676+(12*3))/48,  ( 8.59459459+(12*3))/48,  ( 8.43243243+(12*3))/48,  ( 8.27027027+(12*3))/48,  ( 8.10810811+(12*3))/48,
  ( 7.94594595+(12*3))/48,  ( 7.78378378+(12*3))/48,  ( 7.62162162+(12*3))/48,  ( 7.45945946+(12*3))/48, (  7.2972973+(12*3))/48,
  ( 7.13513514+(12*3))/48,  ( 6.97297297+(12*3))/48,  ( 6.81081081+(12*3))/48,  ( 6.64864865+(12*3))/48,  ( 6.48648649+(12*3))/48,
  ( 6.32432432+(12*3))/48,  ( 6.16216216+(12*3))/48,   (6. +(12*3))/48        , ( 5.83783784+(12*3))/48,  ( 5.67567568+(12*3))/48,
  ( 5.51351351+(12*3))/48,  ( 5.35135135+(12*3))/48,  ( 5.18918919+(12*3))/48,  ( 5.02702703+(12*3))/48,  ( 4.86486486+(12*3))/48,
 (  4.7027027+(12*3))/48 ,  ( 4.54054054+(12*3))/48,  ( 4.37837838+(12*3))/48,  ( 4.21621622+(12*3))/48,  ( 4.05405405+(12*3))/48,
  ( 3.89189189+(12*3))/48,  ( 3.72972973+(12*3))/48,  ( 3.56756757+(12*3))/48,  ( 3.40540541+(12*3))/48,  ( 3.24324324+(12*3))/48,
  ( 3.08108108+(12*3))/48,  ( 2.91891892+(12*3))/48,  ( 2.75675676+(12*3))/48,  ( 2.59459459+(12*3))/48,  ( 2.43243243+(12*3))/48,
  ( 2.27027027+(12*3))/48,  ( 2.10810811+(12*3))/48,  ( 1.94594595+(12*3))/48,  ( 1.78378378+(12*3))/48,  ( 1.62162162+(12*3))/48,
  ( 1.45945946+(12*3))/48, (  1.2972973+(12*3))/48 ,  ( 1.13513514+(12*3))/48,  ( 0.97297297+(12*3))/48,  ( 0.81081081+(12*3))/48,
  ( 0.64864865+(12*3))/48,  ( 0.48648649+(12*3))/48,  ( 0.32432432+(12*3))/48,  ( 0.16216216+(12*3))/48,   0.        ])
